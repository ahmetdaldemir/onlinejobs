import { Repository } from 'typeorm';
import { Job } from './entities/job.entity';
import { JobApplication, ApplicationStatus } from './entities/job-application.entity';
import { NotificationsService } from '../notifications/notifications.service';
import { User } from '../users/entities/user.entity';
import { UserInfo } from '../users/entities/user-info.entity';
import { UploadService } from '../upload/upload.service';
export declare class JobsService {
    private jobRepository;
    private applicationRepository;
    private userRepository;
    private userInfoRepository;
    private notificationsService;
    private uploadService;
    constructor(jobRepository: Repository<Job>, applicationRepository: Repository<JobApplication>, userRepository: Repository<User>, userInfoRepository: Repository<UserInfo>, notificationsService: NotificationsService, uploadService: UploadService);
    create(createJobDto: any, employerId: string): Promise<Job>;
    createWithImages(createJobDto: any, images: Array<Express.Multer.File>, employerId: string): Promise<Job>;
    addImages(jobId: string, images: Array<Express.Multer.File>, userId: string): Promise<Job>;
    deleteImage(jobId: string, filename: string, userId: string): Promise<Job>;
    findAll(filters?: any, user?: any): Promise<Job[]>;
    findById(id: string): Promise<Job>;
    update(id: string, updateJobDto: any, userId: string): Promise<Job>;
    delete(id: string, userId: string): Promise<void>;
    applyForJob(jobId: string, applicantId: string, applicationData: any): Promise<JobApplication>;
    updateApplicationStatus(applicationId: string, status: ApplicationStatus, employerId: string): Promise<JobApplication>;
    getMyApplications(userId: string): Promise<JobApplication[]>;
    getMyJobs(employerId: string): Promise<Job[]>;
    getMyJobsApplications(employerId: string): Promise<JobApplication[]>;
    getJobApplications(jobId: string, employerId: string): Promise<JobApplication[]>;
    getFeaturedJobs(limit?: number): Promise<Job[]>;
    getHighScoreJobs(limit?: number): Promise<Job[]>;
    setFeatured(jobId: string, isFeatured: boolean, reason?: string): Promise<Job>;
    calculateFeaturedScore(jobId: string): Promise<Job>;
    updateAllFeaturedScores(): Promise<void>;
    incrementViewCount(jobId: string): Promise<void>;
}
